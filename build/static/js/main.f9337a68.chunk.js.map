{"version":3,"sources":["MyCard.js","App.js","serviceWorker.js","index.js"],"names":["MyCard","bgBrdrFontColor","userIcon","details","gender","Card","className","CardBody","CardImg","top","width","height","src","picture","large","alt","CardTitle","name","title","first","last","CardSubtitle","email","CardText","location","street","number","city","state","postcode","phone","cell","App","useState","setDetails","fetchDetails","a","Axios","get","data","results","useEffect","Fragment","Container","fluid","Row","Col","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2XAuFeA,EAvEA,SAAC,GAAe,IAAD,sBAEtBC,EAAiBC,EAFRC,EAAa,EAAbA,QAWb,MARuB,SAAnBA,EAAQC,QACRH,EAAkB,YAClBC,EAAW,kBAAC,IAAD,OACe,WAAnBC,EAAQC,SACfH,EAAkB,YAClBC,EAAW,kBAAC,IAAD,OAIX,kBAACG,EAAA,EAAD,CAAMC,UAAWL,GACb,kBAACM,EAAA,EAAD,CAAUD,UAAU,8BAChB,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,YACX,kBAACE,EAAA,EAAD,CACIC,KAAG,EACHC,MAAM,QACNC,OAAO,QACPC,IAAG,UAAET,EAAQU,eAAV,aAAE,EAAiBC,MACtBC,IAAI,iBACJT,UAAU,mCAItB,gCACI,kBAACU,EAAA,EAAD,KACI,0BAAMV,UAAU,WAAWJ,GAC3B,0BAAMI,UAAU,QAAhB,UAAwBH,EAAQc,YAAhC,aAAwB,EAAcC,MAAtC,KACA,0BAAMZ,UAAU,QAAhB,UAAwBH,EAAQc,YAAhC,aAAwB,EAAcE,OACtC,0BAAMb,UAAU,IAAhB,UAAoBH,EAAQc,YAA5B,aAAoB,EAAcG,OAEtC,kBAACC,EAAA,EAAD,CAAcf,UAAU,QACnBH,EAAQmB,QAGjB,kBAACC,EAAA,EAAD,CAAUjB,UAAU,sBAChB,6BACI,0BAAMA,UAAU,QAAhB,UACKH,EAAQqB,gBADb,iBACK,EAAkBC,cADvB,aACK,EAA0BC,OAD/B,KAGA,0BAAMpB,UAAU,QAAhB,UACKH,EAAQqB,gBADb,iBACK,EAAkBC,cADvB,aACK,EAA0BR,KAD/B,MAIJ,6BACI,0BAAMX,UAAU,QAAhB,UACKH,EAAQqB,gBADb,aACK,EAAkBG,KADvB,KAGA,0BAAMrB,UAAU,QAAhB,UACKH,EAAQqB,gBADb,aACK,EAAkBI,MADvB,KAGA,wCACKzB,EAAQqB,gBADb,aACK,EAAkBK,WAG3B,yBAAKvB,UAAU,gCACX,0BAAMA,UAAU,gBACZ,0BAAMA,UAAU,WAAU,kBAAC,IAAD,OAA0BH,EAAQ2B,OAEhE,0BAAMxB,UAAU,WACZ,0BAAMA,UAAU,WAAU,kBAAC,IAAD,OAAmBH,EAAQ4B,WC1ClEC,G,YA5BH,WAAO,IAAD,EAEcC,mBAAS,IAFvB,mBAET9B,EAFS,KAEA+B,EAFA,KAIVC,EAAY,uCAAG,gCAAAC,EAAA,sEACIC,IAAMC,IAAI,8BADd,gBACXC,EADW,EACXA,KACFpC,EAAUoC,EAAKC,QAAQ,GAC7BN,EAAW/B,GAHQ,2CAAH,qDAUlB,OAJAsC,qBAAU,WACRN,MACC,IAGD,kBAAC,IAAMO,SAAP,KACE,wBAAIpC,UAAU,uCAAd,uCACA,kBAACqC,EAAA,EAAD,CAAWC,OAAK,EAACtC,UAAU,0BACzB,kBAACuC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKxC,UAAU,WACb,kBAAC,EAAD,CAAQH,QAASA,UChBT4C,QACW,cAA7BC,OAAOxB,SAASyB,UAEe,UAA7BD,OAAOxB,SAASyB,UAEhBD,OAAOxB,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f9337a68.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Card,\n    CardImg,\n    CardBody,\n    CardTitle,\n    CardSubtitle,\n    CardText,\n} from 'reactstrap';\nimport {\n    FcBusinessman,\n    FcBusinesswoman,\n    FcPhoneAndroid,\n    FcPhone,\n} from 'react-icons/fc';\n\nconst MyCard = ({details}) => {\n    // const bgBrdrFontColor = (details.gender === 'male') ? 'blueTheme' : 'pinkTheme';\n    let bgBrdrFontColor, userIcon;\n    if (details.gender === 'male') {\n        bgBrdrFontColor = 'blueTheme';\n        userIcon = <FcBusinessman />\n    } else if (details.gender === 'female') {\n        bgBrdrFontColor = 'pinkTheme';\n        userIcon = <FcBusinesswoman />\n    }\n\n    return(\n        <Card className={bgBrdrFontColor}>\n            <CardBody className=\"text-center vCardContainer\">\n                <div className=\"imgBlockContainer\">\n                    <div className=\"imgBlock\">\n                        <CardImg\n                            top\n                            width=\"150px\"\n                            height=\"150px\"\n                            src={details.picture?.large}\n                            alt=\"Card image cap\"\n                            className=\"rounded-circle img-thumbnail\"\n                        />\n                    </div>\n                </div>\n                <strong>\n                    <CardTitle>\n                        <span className=\"pr-1 h3\">{userIcon}</span>\n                        <span className=\"pr-1\">{details.name?.title}.</span>\n                        <span className=\"pr-1\">{details.name?.first}</span>\n                        <span className=\"\">{details.name?.last}</span>\n                    </CardTitle>\n                    <CardSubtitle className=\"mb-1\">\n                        {details.email}\n                    </CardSubtitle>\n                </strong>\n                <CardText className=\"cardAddr pt-2 mt-2\">\n                    <div>\n                        <span className=\"pr-1\">\n                            {details.location?.street?.number},\n                        </span>\n                        <span className=\"pr-1\">\n                            {details.location?.street?.name},\n                        </span>\n                    </div>\n                    <div>\n                        <span className=\"pr-1\">\n                            {details.location?.city},\n                        </span>\n                        <span className=\"pr-1\">\n                            {details.location?.state},\n                        </span>\n                        <span>\n                            {details.location?.postcode}\n                        </span>\n                    </div>\n                    <div className=\"contactPhoneNumber pt-2 mt-2\">\n                        <span className=\"phoneNo pr-2\">\n                            <span className=\"pr-1 h6\"><FcPhoneAndroid /></span>{details.phone}\n                        </span>\n                        <span className=\"phoneNo\">\n                            <span className=\"pr-1 h6\"><FcPhone /></span>{details.cell}\n                        </span>\n                    </div>\n                </CardText>\n            </CardBody>\n        </Card>\n    )\n}\n\nexport default MyCard;","import React, { useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport { Container, Row, Col } from 'reactstrap';\nimport MyCard from './MyCard'; \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\nconst App = () => {\n\n  const [details, setDetails] = useState({});\n\n  const fetchDetails = async () => {\n    const { data } = await Axios.get('https://randomuser.me/api/');\n    const details = data.results[0];\n    setDetails(details);\n  }\n  \n  useEffect(() => {\n    fetchDetails();\n  }, []);\n\n  return(\n    <React.Fragment>\n      <h2 className=\"text-center px-2 mt-5 reactAppTitle\">Random User API - Using AXIOS vcard</h2>\n      <Container fluid className=\"p-4 vCardMainContainer\">\n        <Row>\n          <Col className=\"cardCol\">\n            <MyCard details={details} />\n          </Col>\n        </Row>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}